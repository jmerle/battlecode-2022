package camel_case_v2.dijkstra;

import battlecode.common.Direction;
import battlecode.common.GameActionException;
import battlecode.common.MapLocation;
import battlecode.common.RobotController;

// Generated by scripts/dijkstra.py
// Based on Malott Fat Cats's 2021 pathfinding
// Malott Fat Cats's 2021 post-mortem: https://www.battlecode.org/files/postmortem-2021-malott-fat-cats.pdf
@SuppressWarnings("FieldCanBeLocal")
public class Dijkstra20 implements Dijkstra {
    private static RobotController rc;

    private static MapLocation myLocation;

    private static MapLocation location1;
    private static double distance1;
    private static Direction direction1;
    private static MapLocation location2;
    private static double distance2;
    private static Direction direction2;
    private static MapLocation location3;
    private static double distance3;
    private static Direction direction3;
    private static MapLocation location4;
    private static double distance4;
    private static Direction direction4;
    private static MapLocation location5;
    private static double distance5;
    private static Direction direction5;
    private static MapLocation location6;
    private static double distance6;
    private static Direction direction6;
    private static MapLocation location7;
    private static double distance7;
    private static Direction direction7;
    private static MapLocation location8;
    private static double distance8;
    private static Direction direction8;
    private static MapLocation location9;
    private static double distance9;
    private static Direction direction9;
    private static MapLocation location12;
    private static double distance12;
    private static Direction direction12;
    private static MapLocation location15;
    private static double distance15;
    private static Direction direction15;
    private static MapLocation location18;
    private static double distance18;
    private static Direction direction18;
    private static MapLocation location10;
    private static double distance10;
    private static Direction direction10;
    private static MapLocation location11;
    private static double distance11;
    private static Direction direction11;
    private static MapLocation location13;
    private static double distance13;
    private static Direction direction13;
    private static MapLocation location14;
    private static double distance14;
    private static Direction direction14;
    private static MapLocation location16;
    private static double distance16;
    private static Direction direction16;
    private static MapLocation location17;
    private static double distance17;
    private static Direction direction17;
    private static MapLocation location19;
    private static double distance19;
    private static Direction direction19;
    private static MapLocation location20;
    private static double distance20;
    private static Direction direction20;
    private static MapLocation location21;
    private static double distance21;
    private static Direction direction21;
    private static MapLocation location22;
    private static double distance22;
    private static Direction direction22;
    private static MapLocation location23;
    private static double distance23;
    private static Direction direction23;
    private static MapLocation location24;
    private static double distance24;
    private static Direction direction24;
    private static MapLocation location25;
    private static double distance25;
    private static Direction direction25;
    private static MapLocation location30;
    private static double distance30;
    private static Direction direction30;
    private static MapLocation location35;
    private static double distance35;
    private static Direction direction35;
    private static MapLocation location40;
    private static double distance40;
    private static Direction direction40;
    private static MapLocation location26;
    private static double distance26;
    private static Direction direction26;
    private static MapLocation location27;
    private static double distance27;
    private static Direction direction27;
    private static MapLocation location31;
    private static double distance31;
    private static Direction direction31;
    private static MapLocation location32;
    private static double distance32;
    private static Direction direction32;
    private static MapLocation location36;
    private static double distance36;
    private static Direction direction36;
    private static MapLocation location37;
    private static double distance37;
    private static Direction direction37;
    private static MapLocation location41;
    private static double distance41;
    private static Direction direction41;
    private static MapLocation location42;
    private static double distance42;
    private static Direction direction42;
    private static MapLocation location28;
    private static double distance28;
    private static Direction direction28;
    private static MapLocation location29;
    private static double distance29;
    private static Direction direction29;
    private static MapLocation location33;
    private static double distance33;
    private static Direction direction33;
    private static MapLocation location34;
    private static double distance34;
    private static Direction direction34;
    private static MapLocation location38;
    private static double distance38;
    private static Direction direction38;
    private static MapLocation location39;
    private static double distance39;
    private static Direction direction39;
    private static MapLocation location43;
    private static double distance43;
    private static Direction direction43;
    private static MapLocation location44;
    private static double distance44;
    private static Direction direction44;
    private static MapLocation location49;
    private static double distance49;
    private static Direction direction49;
    private static MapLocation location54;
    private static double distance54;
    private static Direction direction54;
    private static MapLocation location59;
    private static double distance59;
    private static Direction direction59;
    private static MapLocation location64;
    private static double distance64;
    private static Direction direction64;
    private static MapLocation location50;
    private static double distance50;
    private static Direction direction50;
    private static MapLocation location51;
    private static double distance51;
    private static Direction direction51;
    private static MapLocation location55;
    private static double distance55;
    private static Direction direction55;
    private static MapLocation location56;
    private static double distance56;
    private static Direction direction56;
    private static MapLocation location60;
    private static double distance60;
    private static Direction direction60;
    private static MapLocation location61;
    private static double distance61;
    private static Direction direction61;
    private static MapLocation location65;
    private static double distance65;
    private static Direction direction65;
    private static MapLocation location66;
    private static double distance66;
    private static Direction direction66;
    private static MapLocation location45;
    private static double distance45;
    private static Direction direction45;
    private static MapLocation location46;
    private static double distance46;
    private static Direction direction46;
    private static MapLocation location47;
    private static double distance47;
    private static Direction direction47;
    private static MapLocation location48;
    private static double distance48;
    private static Direction direction48;
    private static MapLocation location52;
    private static double distance52;
    private static Direction direction52;
    private static MapLocation location53;
    private static double distance53;
    private static Direction direction53;
    private static MapLocation location57;
    private static double distance57;
    private static Direction direction57;
    private static MapLocation location58;
    private static double distance58;
    private static Direction direction58;
    private static MapLocation location62;
    private static double distance62;
    private static Direction direction62;
    private static MapLocation location63;
    private static double distance63;
    private static Direction direction63;
    private static MapLocation location67;
    private static double distance67;
    private static Direction direction67;
    private static MapLocation location68;
    private static double distance68;
    private static Direction direction68;

    private static double weight;

    private static double currentDistance;

    private static double score28;
    private static double score29;
    private static double score33;
    private static double score34;
    private static double score38;
    private static double score39;
    private static double score43;
    private static double score44;
    private static double score49;
    private static double score54;
    private static double score59;
    private static double score64;
    private static double score50;
    private static double score51;
    private static double score55;
    private static double score56;
    private static double score60;
    private static double score61;
    private static double score65;
    private static double score66;
    private static double score45;
    private static double score46;
    private static double score47;
    private static double score48;
    private static double score52;
    private static double score53;
    private static double score57;
    private static double score58;
    private static double score62;
    private static double score63;
    private static double score67;

    private static double maxScore;

    public Dijkstra20(RobotController rc) {
        Dijkstra20.rc = rc;
    }

    @Override
    public Direction getBestDirection(MapLocation target) throws GameActionException {
        myLocation = rc.getLocation();

        location1 = rc.adjacentLocation(Direction.WEST);
        distance1 = 1_000_000.0;
        location2 = rc.adjacentLocation(Direction.EAST);
        distance2 = 1_000_000.0;
        location3 = rc.adjacentLocation(Direction.SOUTH);
        distance3 = 1_000_000.0;
        location4 = rc.adjacentLocation(Direction.NORTH);
        distance4 = 1_000_000.0;
        location5 = rc.adjacentLocation(Direction.SOUTHWEST);
        distance5 = 1_000_000.0;
        location6 = rc.adjacentLocation(Direction.NORTHWEST);
        distance6 = 1_000_000.0;
        location7 = rc.adjacentLocation(Direction.SOUTHEAST);
        distance7 = 1_000_000.0;
        location8 = rc.adjacentLocation(Direction.NORTHEAST);
        distance8 = 1_000_000.0;
        location9 = location1.add(Direction.WEST);
        distance9 = 1_000_000.0;
        location12 = location2.add(Direction.EAST);
        distance12 = 1_000_000.0;
        location15 = location3.add(Direction.SOUTH);
        distance15 = 1_000_000.0;
        location18 = location4.add(Direction.NORTH);
        distance18 = 1_000_000.0;
        location10 = location1.add(Direction.SOUTHWEST);
        distance10 = 1_000_000.0;
        location11 = location1.add(Direction.NORTHWEST);
        distance11 = 1_000_000.0;
        location13 = location2.add(Direction.SOUTHEAST);
        distance13 = 1_000_000.0;
        location14 = location2.add(Direction.NORTHEAST);
        distance14 = 1_000_000.0;
        location16 = location3.add(Direction.SOUTHWEST);
        distance16 = 1_000_000.0;
        location17 = location3.add(Direction.SOUTHEAST);
        distance17 = 1_000_000.0;
        location19 = location4.add(Direction.NORTHWEST);
        distance19 = 1_000_000.0;
        location20 = location4.add(Direction.NORTHEAST);
        distance20 = 1_000_000.0;
        location21 = location5.add(Direction.SOUTHWEST);
        distance21 = 1_000_000.0;
        location22 = location6.add(Direction.NORTHWEST);
        distance22 = 1_000_000.0;
        location23 = location7.add(Direction.SOUTHEAST);
        distance23 = 1_000_000.0;
        location24 = location8.add(Direction.NORTHEAST);
        distance24 = 1_000_000.0;
        location25 = location9.add(Direction.WEST);
        distance25 = 1_000_000.0;
        location30 = location12.add(Direction.EAST);
        distance30 = 1_000_000.0;
        location35 = location15.add(Direction.SOUTH);
        distance35 = 1_000_000.0;
        location40 = location18.add(Direction.NORTH);
        distance40 = 1_000_000.0;
        location26 = location9.add(Direction.SOUTHWEST);
        distance26 = 1_000_000.0;
        location27 = location9.add(Direction.NORTHWEST);
        distance27 = 1_000_000.0;
        location31 = location12.add(Direction.SOUTHEAST);
        distance31 = 1_000_000.0;
        location32 = location12.add(Direction.NORTHEAST);
        distance32 = 1_000_000.0;
        location36 = location15.add(Direction.SOUTHWEST);
        distance36 = 1_000_000.0;
        location37 = location15.add(Direction.SOUTHEAST);
        distance37 = 1_000_000.0;
        location41 = location18.add(Direction.NORTHWEST);
        distance41 = 1_000_000.0;
        location42 = location18.add(Direction.NORTHEAST);
        distance42 = 1_000_000.0;
        location28 = location10.add(Direction.SOUTHWEST);
        distance28 = 1_000_000.0;
        location29 = location11.add(Direction.NORTHWEST);
        distance29 = 1_000_000.0;
        location33 = location13.add(Direction.SOUTHEAST);
        distance33 = 1_000_000.0;
        location34 = location14.add(Direction.NORTHEAST);
        distance34 = 1_000_000.0;
        location38 = location16.add(Direction.SOUTHWEST);
        distance38 = 1_000_000.0;
        location39 = location17.add(Direction.SOUTHEAST);
        distance39 = 1_000_000.0;
        location43 = location19.add(Direction.NORTHWEST);
        distance43 = 1_000_000.0;
        location44 = location20.add(Direction.NORTHEAST);
        distance44 = 1_000_000.0;
        location49 = location25.add(Direction.WEST);
        distance49 = 1_000_000.0;
        location54 = location30.add(Direction.EAST);
        distance54 = 1_000_000.0;
        location59 = location35.add(Direction.SOUTH);
        distance59 = 1_000_000.0;
        location64 = location40.add(Direction.NORTH);
        distance64 = 1_000_000.0;
        location50 = location25.add(Direction.SOUTHWEST);
        distance50 = 1_000_000.0;
        location51 = location25.add(Direction.NORTHWEST);
        distance51 = 1_000_000.0;
        location55 = location30.add(Direction.SOUTHEAST);
        distance55 = 1_000_000.0;
        location56 = location30.add(Direction.NORTHEAST);
        distance56 = 1_000_000.0;
        location60 = location35.add(Direction.SOUTHWEST);
        distance60 = 1_000_000.0;
        location61 = location35.add(Direction.SOUTHEAST);
        distance61 = 1_000_000.0;
        location65 = location40.add(Direction.NORTHWEST);
        distance65 = 1_000_000.0;
        location66 = location40.add(Direction.NORTHEAST);
        distance66 = 1_000_000.0;
        location45 = location21.add(Direction.SOUTHWEST);
        distance45 = 1_000_000.0;
        location46 = location22.add(Direction.NORTHWEST);
        distance46 = 1_000_000.0;
        location47 = location23.add(Direction.SOUTHEAST);
        distance47 = 1_000_000.0;
        location48 = location24.add(Direction.NORTHEAST);
        distance48 = 1_000_000.0;
        location52 = location26.add(Direction.SOUTHWEST);
        distance52 = 1_000_000.0;
        location53 = location27.add(Direction.NORTHWEST);
        distance53 = 1_000_000.0;
        location57 = location31.add(Direction.SOUTHEAST);
        distance57 = 1_000_000.0;
        location58 = location32.add(Direction.NORTHEAST);
        distance58 = 1_000_000.0;
        location62 = location36.add(Direction.SOUTHWEST);
        distance62 = 1_000_000.0;
        location63 = location37.add(Direction.SOUTHEAST);
        distance63 = 1_000_000.0;
        location67 = location41.add(Direction.NORTHWEST);
        distance67 = 1_000_000.0;
        location68 = location42.add(Direction.NORTHEAST);
        distance68 = 1_000_000.0;

        if (rc.canMove(Direction.WEST)) {
            distance1 = 1.0 + rc.senseRubble(location1);
            direction1 = Direction.WEST;
        }
        if (rc.canMove(Direction.EAST)) {
            distance2 = 1.0 + rc.senseRubble(location2);
            direction2 = Direction.EAST;
        }
        if (rc.canMove(Direction.SOUTH)) {
            distance3 = 1.0 + rc.senseRubble(location3);
            direction3 = Direction.SOUTH;
        }
        if (rc.canMove(Direction.NORTH)) {
            distance4 = 1.0 + rc.senseRubble(location4);
            direction4 = Direction.NORTH;
        }
        if (rc.canMove(Direction.SOUTHWEST)) {
            distance5 = 1.0 + rc.senseRubble(location5);
            direction5 = Direction.SOUTHWEST;
        }
        if (rc.canMove(Direction.NORTHWEST)) {
            distance6 = 1.0 + rc.senseRubble(location6);
            direction6 = Direction.NORTHWEST;
        }
        if (rc.canMove(Direction.SOUTHEAST)) {
            distance7 = 1.0 + rc.senseRubble(location7);
            direction7 = Direction.SOUTHEAST;
        }
        if (rc.canMove(Direction.NORTHEAST)) {
            distance8 = 1.0 + rc.senseRubble(location8);
            direction8 = Direction.NORTHEAST;
        }
        if (rc.onTheMap(location9)) {
            weight = 1.0 + rc.senseRubble(location9);
            if (distance1 + weight < distance9) {
                distance9 = distance1 + weight;
                direction9 = direction1;
            }
            if (distance5 + weight < distance9) {
                distance9 = distance5 + weight;
                direction9 = direction5;
            }
            if (distance6 + weight < distance9) {
                distance9 = distance6 + weight;
                direction9 = direction6;
            }
        }
        if (rc.onTheMap(location12)) {
            weight = 1.0 + rc.senseRubble(location12);
            if (distance2 + weight < distance12) {
                distance12 = distance2 + weight;
                direction12 = direction2;
            }
            if (distance7 + weight < distance12) {
                distance12 = distance7 + weight;
                direction12 = direction7;
            }
            if (distance8 + weight < distance12) {
                distance12 = distance8 + weight;
                direction12 = direction8;
            }
        }
        if (rc.onTheMap(location15)) {
            weight = 1.0 + rc.senseRubble(location15);
            if (distance3 + weight < distance15) {
                distance15 = distance3 + weight;
                direction15 = direction3;
            }
            if (distance5 + weight < distance15) {
                distance15 = distance5 + weight;
                direction15 = direction5;
            }
            if (distance7 + weight < distance15) {
                distance15 = distance7 + weight;
                direction15 = direction7;
            }
        }
        if (rc.onTheMap(location18)) {
            weight = 1.0 + rc.senseRubble(location18);
            if (distance4 + weight < distance18) {
                distance18 = distance4 + weight;
                direction18 = direction4;
            }
            if (distance6 + weight < distance18) {
                distance18 = distance6 + weight;
                direction18 = direction6;
            }
            if (distance8 + weight < distance18) {
                distance18 = distance8 + weight;
                direction18 = direction8;
            }
        }
        if (rc.onTheMap(location10)) {
            weight = 1.0 + rc.senseRubble(location10);
            if (distance5 + weight < distance10) {
                distance10 = distance5 + weight;
                direction10 = direction5;
            }
            if (distance9 + weight < distance10) {
                distance10 = distance9 + weight;
                direction10 = direction9;
            }
            if (distance1 + weight < distance10) {
                distance10 = distance1 + weight;
                direction10 = direction1;
            }
        }
        if (rc.onTheMap(location11)) {
            weight = 1.0 + rc.senseRubble(location11);
            if (distance6 + weight < distance11) {
                distance11 = distance6 + weight;
                direction11 = direction6;
            }
            if (distance9 + weight < distance11) {
                distance11 = distance9 + weight;
                direction11 = direction9;
            }
            if (distance1 + weight < distance11) {
                distance11 = distance1 + weight;
                direction11 = direction1;
            }
        }
        if (rc.onTheMap(location13)) {
            weight = 1.0 + rc.senseRubble(location13);
            if (distance7 + weight < distance13) {
                distance13 = distance7 + weight;
                direction13 = direction7;
            }
            if (distance12 + weight < distance13) {
                distance13 = distance12 + weight;
                direction13 = direction12;
            }
            if (distance2 + weight < distance13) {
                distance13 = distance2 + weight;
                direction13 = direction2;
            }
        }
        if (rc.onTheMap(location14)) {
            weight = 1.0 + rc.senseRubble(location14);
            if (distance8 + weight < distance14) {
                distance14 = distance8 + weight;
                direction14 = direction8;
            }
            if (distance12 + weight < distance14) {
                distance14 = distance12 + weight;
                direction14 = direction12;
            }
            if (distance2 + weight < distance14) {
                distance14 = distance2 + weight;
                direction14 = direction2;
            }
        }
        if (rc.onTheMap(location16)) {
            weight = 1.0 + rc.senseRubble(location16);
            if (distance15 + weight < distance16) {
                distance16 = distance15 + weight;
                direction16 = direction15;
            }
            if (distance5 + weight < distance16) {
                distance16 = distance5 + weight;
                direction16 = direction5;
            }
            if (distance3 + weight < distance16) {
                distance16 = distance3 + weight;
                direction16 = direction3;
            }
        }
        if (rc.onTheMap(location17)) {
            weight = 1.0 + rc.senseRubble(location17);
            if (distance15 + weight < distance17) {
                distance17 = distance15 + weight;
                direction17 = direction15;
            }
            if (distance7 + weight < distance17) {
                distance17 = distance7 + weight;
                direction17 = direction7;
            }
            if (distance3 + weight < distance17) {
                distance17 = distance3 + weight;
                direction17 = direction3;
            }
        }
        if (rc.onTheMap(location19)) {
            weight = 1.0 + rc.senseRubble(location19);
            if (distance18 + weight < distance19) {
                distance19 = distance18 + weight;
                direction19 = direction18;
            }
            if (distance6 + weight < distance19) {
                distance19 = distance6 + weight;
                direction19 = direction6;
            }
            if (distance4 + weight < distance19) {
                distance19 = distance4 + weight;
                direction19 = direction4;
            }
        }
        if (rc.onTheMap(location20)) {
            weight = 1.0 + rc.senseRubble(location20);
            if (distance18 + weight < distance20) {
                distance20 = distance18 + weight;
                direction20 = direction18;
            }
            if (distance8 + weight < distance20) {
                distance20 = distance8 + weight;
                direction20 = direction8;
            }
            if (distance4 + weight < distance20) {
                distance20 = distance4 + weight;
                direction20 = direction4;
            }
        }
        if (rc.onTheMap(location21)) {
            weight = 1.0 + rc.senseRubble(location21);
            if (distance16 + weight < distance21) {
                distance21 = distance16 + weight;
                direction21 = direction16;
            }
            if (distance10 + weight < distance21) {
                distance21 = distance10 + weight;
                direction21 = direction10;
            }
            if (distance5 + weight < distance21) {
                distance21 = distance5 + weight;
                direction21 = direction5;
            }
        }
        if (rc.onTheMap(location22)) {
            weight = 1.0 + rc.senseRubble(location22);
            if (distance19 + weight < distance22) {
                distance22 = distance19 + weight;
                direction22 = direction19;
            }
            if (distance11 + weight < distance22) {
                distance22 = distance11 + weight;
                direction22 = direction11;
            }
            if (distance6 + weight < distance22) {
                distance22 = distance6 + weight;
                direction22 = direction6;
            }
        }
        if (rc.onTheMap(location23)) {
            weight = 1.0 + rc.senseRubble(location23);
            if (distance17 + weight < distance23) {
                distance23 = distance17 + weight;
                direction23 = direction17;
            }
            if (distance13 + weight < distance23) {
                distance23 = distance13 + weight;
                direction23 = direction13;
            }
            if (distance7 + weight < distance23) {
                distance23 = distance7 + weight;
                direction23 = direction7;
            }
        }
        if (rc.onTheMap(location24)) {
            weight = 1.0 + rc.senseRubble(location24);
            if (distance20 + weight < distance24) {
                distance24 = distance20 + weight;
                direction24 = direction20;
            }
            if (distance14 + weight < distance24) {
                distance24 = distance14 + weight;
                direction24 = direction14;
            }
            if (distance8 + weight < distance24) {
                distance24 = distance8 + weight;
                direction24 = direction8;
            }
        }
        if (rc.onTheMap(location25)) {
            weight = 1.0 + rc.senseRubble(location25);
            if (distance9 + weight < distance25) {
                distance25 = distance9 + weight;
                direction25 = direction9;
            }
            if (distance10 + weight < distance25) {
                distance25 = distance10 + weight;
                direction25 = direction10;
            }
            if (distance11 + weight < distance25) {
                distance25 = distance11 + weight;
                direction25 = direction11;
            }
        }
        if (rc.onTheMap(location30)) {
            weight = 1.0 + rc.senseRubble(location30);
            if (distance12 + weight < distance30) {
                distance30 = distance12 + weight;
                direction30 = direction12;
            }
            if (distance13 + weight < distance30) {
                distance30 = distance13 + weight;
                direction30 = direction13;
            }
            if (distance14 + weight < distance30) {
                distance30 = distance14 + weight;
                direction30 = direction14;
            }
        }
        if (rc.onTheMap(location35)) {
            weight = 1.0 + rc.senseRubble(location35);
            if (distance15 + weight < distance35) {
                distance35 = distance15 + weight;
                direction35 = direction15;
            }
            if (distance16 + weight < distance35) {
                distance35 = distance16 + weight;
                direction35 = direction16;
            }
            if (distance17 + weight < distance35) {
                distance35 = distance17 + weight;
                direction35 = direction17;
            }
        }
        if (rc.onTheMap(location40)) {
            weight = 1.0 + rc.senseRubble(location40);
            if (distance18 + weight < distance40) {
                distance40 = distance18 + weight;
                direction40 = direction18;
            }
            if (distance19 + weight < distance40) {
                distance40 = distance19 + weight;
                direction40 = direction19;
            }
            if (distance20 + weight < distance40) {
                distance40 = distance20 + weight;
                direction40 = direction20;
            }
        }
        if (rc.onTheMap(location26)) {
            weight = 1.0 + rc.senseRubble(location26);
            if (distance10 + weight < distance26) {
                distance26 = distance10 + weight;
                direction26 = direction10;
            }
            if (distance25 + weight < distance26) {
                distance26 = distance25 + weight;
                direction26 = direction25;
            }
            if (distance21 + weight < distance26) {
                distance26 = distance21 + weight;
                direction26 = direction21;
            }
            if (distance9 + weight < distance26) {
                distance26 = distance9 + weight;
                direction26 = direction9;
            }
        }
        if (rc.onTheMap(location27)) {
            weight = 1.0 + rc.senseRubble(location27);
            if (distance11 + weight < distance27) {
                distance27 = distance11 + weight;
                direction27 = direction11;
            }
            if (distance25 + weight < distance27) {
                distance27 = distance25 + weight;
                direction27 = direction25;
            }
            if (distance9 + weight < distance27) {
                distance27 = distance9 + weight;
                direction27 = direction9;
            }
            if (distance22 + weight < distance27) {
                distance27 = distance22 + weight;
                direction27 = direction22;
            }
        }
        if (rc.onTheMap(location31)) {
            weight = 1.0 + rc.senseRubble(location31);
            if (distance13 + weight < distance31) {
                distance31 = distance13 + weight;
                direction31 = direction13;
            }
            if (distance30 + weight < distance31) {
                distance31 = distance30 + weight;
                direction31 = direction30;
            }
            if (distance23 + weight < distance31) {
                distance31 = distance23 + weight;
                direction31 = direction23;
            }
            if (distance12 + weight < distance31) {
                distance31 = distance12 + weight;
                direction31 = direction12;
            }
        }
        if (rc.onTheMap(location32)) {
            weight = 1.0 + rc.senseRubble(location32);
            if (distance14 + weight < distance32) {
                distance32 = distance14 + weight;
                direction32 = direction14;
            }
            if (distance30 + weight < distance32) {
                distance32 = distance30 + weight;
                direction32 = direction30;
            }
            if (distance12 + weight < distance32) {
                distance32 = distance12 + weight;
                direction32 = direction12;
            }
            if (distance24 + weight < distance32) {
                distance32 = distance24 + weight;
                direction32 = direction24;
            }
        }
        if (rc.onTheMap(location36)) {
            weight = 1.0 + rc.senseRubble(location36);
            if (distance35 + weight < distance36) {
                distance36 = distance35 + weight;
                direction36 = direction35;
            }
            if (distance16 + weight < distance36) {
                distance36 = distance16 + weight;
                direction36 = direction16;
            }
            if (distance21 + weight < distance36) {
                distance36 = distance21 + weight;
                direction36 = direction21;
            }
            if (distance15 + weight < distance36) {
                distance36 = distance15 + weight;
                direction36 = direction15;
            }
        }
        if (rc.onTheMap(location37)) {
            weight = 1.0 + rc.senseRubble(location37);
            if (distance35 + weight < distance37) {
                distance37 = distance35 + weight;
                direction37 = direction35;
            }
            if (distance17 + weight < distance37) {
                distance37 = distance17 + weight;
                direction37 = direction17;
            }
            if (distance15 + weight < distance37) {
                distance37 = distance15 + weight;
                direction37 = direction15;
            }
            if (distance23 + weight < distance37) {
                distance37 = distance23 + weight;
                direction37 = direction23;
            }
        }
        if (rc.onTheMap(location41)) {
            weight = 1.0 + rc.senseRubble(location41);
            if (distance40 + weight < distance41) {
                distance41 = distance40 + weight;
                direction41 = direction40;
            }
            if (distance19 + weight < distance41) {
                distance41 = distance19 + weight;
                direction41 = direction19;
            }
            if (distance22 + weight < distance41) {
                distance41 = distance22 + weight;
                direction41 = direction22;
            }
            if (distance18 + weight < distance41) {
                distance41 = distance18 + weight;
                direction41 = direction18;
            }
        }
        if (rc.onTheMap(location42)) {
            weight = 1.0 + rc.senseRubble(location42);
            if (distance40 + weight < distance42) {
                distance42 = distance40 + weight;
                direction42 = direction40;
            }
            if (distance20 + weight < distance42) {
                distance42 = distance20 + weight;
                direction42 = direction20;
            }
            if (distance18 + weight < distance42) {
                distance42 = distance18 + weight;
                direction42 = direction18;
            }
            if (distance24 + weight < distance42) {
                distance42 = distance24 + weight;
                direction42 = direction24;
            }
        }
        if (rc.onTheMap(location28)) {
            weight = 1.0 + rc.senseRubble(location28);
            if (distance21 + weight < distance28) {
                distance28 = distance21 + weight;
                direction28 = direction21;
            }
            if (distance26 + weight < distance28) {
                distance28 = distance26 + weight;
                direction28 = direction26;
            }
            if (distance10 + weight < distance28) {
                distance28 = distance10 + weight;
                direction28 = direction10;
            }
        }
        if (rc.onTheMap(location29)) {
            weight = 1.0 + rc.senseRubble(location29);
            if (distance22 + weight < distance29) {
                distance29 = distance22 + weight;
                direction29 = direction22;
            }
            if (distance27 + weight < distance29) {
                distance29 = distance27 + weight;
                direction29 = direction27;
            }
            if (distance11 + weight < distance29) {
                distance29 = distance11 + weight;
                direction29 = direction11;
            }
        }
        if (rc.onTheMap(location33)) {
            weight = 1.0 + rc.senseRubble(location33);
            if (distance23 + weight < distance33) {
                distance33 = distance23 + weight;
                direction33 = direction23;
            }
            if (distance31 + weight < distance33) {
                distance33 = distance31 + weight;
                direction33 = direction31;
            }
            if (distance13 + weight < distance33) {
                distance33 = distance13 + weight;
                direction33 = direction13;
            }
        }
        if (rc.onTheMap(location34)) {
            weight = 1.0 + rc.senseRubble(location34);
            if (distance24 + weight < distance34) {
                distance34 = distance24 + weight;
                direction34 = direction24;
            }
            if (distance32 + weight < distance34) {
                distance34 = distance32 + weight;
                direction34 = direction32;
            }
            if (distance14 + weight < distance34) {
                distance34 = distance14 + weight;
                direction34 = direction14;
            }
        }
        if (rc.onTheMap(location38)) {
            weight = 1.0 + rc.senseRubble(location38);
            if (distance36 + weight < distance38) {
                distance38 = distance36 + weight;
                direction38 = direction36;
            }
            if (distance21 + weight < distance38) {
                distance38 = distance21 + weight;
                direction38 = direction21;
            }
            if (distance16 + weight < distance38) {
                distance38 = distance16 + weight;
                direction38 = direction16;
            }
        }
        if (rc.onTheMap(location39)) {
            weight = 1.0 + rc.senseRubble(location39);
            if (distance37 + weight < distance39) {
                distance39 = distance37 + weight;
                direction39 = direction37;
            }
            if (distance23 + weight < distance39) {
                distance39 = distance23 + weight;
                direction39 = direction23;
            }
            if (distance17 + weight < distance39) {
                distance39 = distance17 + weight;
                direction39 = direction17;
            }
        }
        if (rc.onTheMap(location43)) {
            weight = 1.0 + rc.senseRubble(location43);
            if (distance41 + weight < distance43) {
                distance43 = distance41 + weight;
                direction43 = direction41;
            }
            if (distance22 + weight < distance43) {
                distance43 = distance22 + weight;
                direction43 = direction22;
            }
            if (distance19 + weight < distance43) {
                distance43 = distance19 + weight;
                direction43 = direction19;
            }
        }
        if (rc.onTheMap(location44)) {
            weight = 1.0 + rc.senseRubble(location44);
            if (distance42 + weight < distance44) {
                distance44 = distance42 + weight;
                direction44 = direction42;
            }
            if (distance24 + weight < distance44) {
                distance44 = distance24 + weight;
                direction44 = direction24;
            }
            if (distance20 + weight < distance44) {
                distance44 = distance20 + weight;
                direction44 = direction20;
            }
        }
        if (rc.onTheMap(location49)) {
            weight = 1.0 + rc.senseRubble(location49);
            if (distance25 + weight < distance49) {
                distance49 = distance25 + weight;
                direction49 = direction25;
            }
            if (distance26 + weight < distance49) {
                distance49 = distance26 + weight;
                direction49 = direction26;
            }
            if (distance27 + weight < distance49) {
                distance49 = distance27 + weight;
                direction49 = direction27;
            }
        }
        if (rc.onTheMap(location54)) {
            weight = 1.0 + rc.senseRubble(location54);
            if (distance30 + weight < distance54) {
                distance54 = distance30 + weight;
                direction54 = direction30;
            }
            if (distance31 + weight < distance54) {
                distance54 = distance31 + weight;
                direction54 = direction31;
            }
            if (distance32 + weight < distance54) {
                distance54 = distance32 + weight;
                direction54 = direction32;
            }
        }
        if (rc.onTheMap(location59)) {
            weight = 1.0 + rc.senseRubble(location59);
            if (distance35 + weight < distance59) {
                distance59 = distance35 + weight;
                direction59 = direction35;
            }
            if (distance36 + weight < distance59) {
                distance59 = distance36 + weight;
                direction59 = direction36;
            }
            if (distance37 + weight < distance59) {
                distance59 = distance37 + weight;
                direction59 = direction37;
            }
        }
        if (rc.onTheMap(location64)) {
            weight = 1.0 + rc.senseRubble(location64);
            if (distance40 + weight < distance64) {
                distance64 = distance40 + weight;
                direction64 = direction40;
            }
            if (distance41 + weight < distance64) {
                distance64 = distance41 + weight;
                direction64 = direction41;
            }
            if (distance42 + weight < distance64) {
                distance64 = distance42 + weight;
                direction64 = direction42;
            }
        }
        if (rc.onTheMap(location50)) {
            weight = 1.0 + rc.senseRubble(location50);
            if (distance26 + weight < distance50) {
                distance50 = distance26 + weight;
                direction50 = direction26;
            }
            if (distance49 + weight < distance50) {
                distance50 = distance49 + weight;
                direction50 = direction49;
            }
            if (distance28 + weight < distance50) {
                distance50 = distance28 + weight;
                direction50 = direction28;
            }
            if (distance25 + weight < distance50) {
                distance50 = distance25 + weight;
                direction50 = direction25;
            }
        }
        if (rc.onTheMap(location51)) {
            weight = 1.0 + rc.senseRubble(location51);
            if (distance27 + weight < distance51) {
                distance51 = distance27 + weight;
                direction51 = direction27;
            }
            if (distance49 + weight < distance51) {
                distance51 = distance49 + weight;
                direction51 = direction49;
            }
            if (distance25 + weight < distance51) {
                distance51 = distance25 + weight;
                direction51 = direction25;
            }
            if (distance29 + weight < distance51) {
                distance51 = distance29 + weight;
                direction51 = direction29;
            }
        }
        if (rc.onTheMap(location55)) {
            weight = 1.0 + rc.senseRubble(location55);
            if (distance31 + weight < distance55) {
                distance55 = distance31 + weight;
                direction55 = direction31;
            }
            if (distance54 + weight < distance55) {
                distance55 = distance54 + weight;
                direction55 = direction54;
            }
            if (distance33 + weight < distance55) {
                distance55 = distance33 + weight;
                direction55 = direction33;
            }
            if (distance30 + weight < distance55) {
                distance55 = distance30 + weight;
                direction55 = direction30;
            }
        }
        if (rc.onTheMap(location56)) {
            weight = 1.0 + rc.senseRubble(location56);
            if (distance32 + weight < distance56) {
                distance56 = distance32 + weight;
                direction56 = direction32;
            }
            if (distance54 + weight < distance56) {
                distance56 = distance54 + weight;
                direction56 = direction54;
            }
            if (distance30 + weight < distance56) {
                distance56 = distance30 + weight;
                direction56 = direction30;
            }
            if (distance34 + weight < distance56) {
                distance56 = distance34 + weight;
                direction56 = direction34;
            }
        }
        if (rc.onTheMap(location60)) {
            weight = 1.0 + rc.senseRubble(location60);
            if (distance59 + weight < distance60) {
                distance60 = distance59 + weight;
                direction60 = direction59;
            }
            if (distance36 + weight < distance60) {
                distance60 = distance36 + weight;
                direction60 = direction36;
            }
            if (distance38 + weight < distance60) {
                distance60 = distance38 + weight;
                direction60 = direction38;
            }
            if (distance35 + weight < distance60) {
                distance60 = distance35 + weight;
                direction60 = direction35;
            }
        }
        if (rc.onTheMap(location61)) {
            weight = 1.0 + rc.senseRubble(location61);
            if (distance59 + weight < distance61) {
                distance61 = distance59 + weight;
                direction61 = direction59;
            }
            if (distance37 + weight < distance61) {
                distance61 = distance37 + weight;
                direction61 = direction37;
            }
            if (distance35 + weight < distance61) {
                distance61 = distance35 + weight;
                direction61 = direction35;
            }
            if (distance39 + weight < distance61) {
                distance61 = distance39 + weight;
                direction61 = direction39;
            }
        }
        if (rc.onTheMap(location65)) {
            weight = 1.0 + rc.senseRubble(location65);
            if (distance64 + weight < distance65) {
                distance65 = distance64 + weight;
                direction65 = direction64;
            }
            if (distance41 + weight < distance65) {
                distance65 = distance41 + weight;
                direction65 = direction41;
            }
            if (distance43 + weight < distance65) {
                distance65 = distance43 + weight;
                direction65 = direction43;
            }
            if (distance40 + weight < distance65) {
                distance65 = distance40 + weight;
                direction65 = direction40;
            }
        }
        if (rc.onTheMap(location66)) {
            weight = 1.0 + rc.senseRubble(location66);
            if (distance64 + weight < distance66) {
                distance66 = distance64 + weight;
                direction66 = direction64;
            }
            if (distance42 + weight < distance66) {
                distance66 = distance42 + weight;
                direction66 = direction42;
            }
            if (distance40 + weight < distance66) {
                distance66 = distance40 + weight;
                direction66 = direction40;
            }
            if (distance44 + weight < distance66) {
                distance66 = distance44 + weight;
                direction66 = direction44;
            }
        }
        if (rc.onTheMap(location45)) {
            weight = 1.0 + rc.senseRubble(location45);
            if (distance38 + weight < distance45) {
                distance45 = distance38 + weight;
                direction45 = direction38;
            }
            if (distance28 + weight < distance45) {
                distance45 = distance28 + weight;
                direction45 = direction28;
            }
            if (distance21 + weight < distance45) {
                distance45 = distance21 + weight;
                direction45 = direction21;
            }
        }
        if (rc.onTheMap(location46)) {
            weight = 1.0 + rc.senseRubble(location46);
            if (distance43 + weight < distance46) {
                distance46 = distance43 + weight;
                direction46 = direction43;
            }
            if (distance29 + weight < distance46) {
                distance46 = distance29 + weight;
                direction46 = direction29;
            }
            if (distance22 + weight < distance46) {
                distance46 = distance22 + weight;
                direction46 = direction22;
            }
        }
        if (rc.onTheMap(location47)) {
            weight = 1.0 + rc.senseRubble(location47);
            if (distance39 + weight < distance47) {
                distance47 = distance39 + weight;
                direction47 = direction39;
            }
            if (distance33 + weight < distance47) {
                distance47 = distance33 + weight;
                direction47 = direction33;
            }
            if (distance23 + weight < distance47) {
                distance47 = distance23 + weight;
                direction47 = direction23;
            }
        }
        if (rc.onTheMap(location48)) {
            weight = 1.0 + rc.senseRubble(location48);
            if (distance44 + weight < distance48) {
                distance48 = distance44 + weight;
                direction48 = direction44;
            }
            if (distance34 + weight < distance48) {
                distance48 = distance34 + weight;
                direction48 = direction34;
            }
            if (distance24 + weight < distance48) {
                distance48 = distance24 + weight;
                direction48 = direction24;
            }
        }
        if (rc.onTheMap(location52)) {
            weight = 1.0 + rc.senseRubble(location52);
            if (distance28 + weight < distance52) {
                distance52 = distance28 + weight;
                direction52 = direction28;
            }
            if (distance50 + weight < distance52) {
                distance52 = distance50 + weight;
                direction52 = direction50;
            }
            if (distance45 + weight < distance52) {
                distance52 = distance45 + weight;
                direction52 = direction45;
            }
            if (distance26 + weight < distance52) {
                distance52 = distance26 + weight;
                direction52 = direction26;
            }
        }
        if (rc.onTheMap(location53)) {
            weight = 1.0 + rc.senseRubble(location53);
            if (distance29 + weight < distance53) {
                distance53 = distance29 + weight;
                direction53 = direction29;
            }
            if (distance51 + weight < distance53) {
                distance53 = distance51 + weight;
                direction53 = direction51;
            }
            if (distance27 + weight < distance53) {
                distance53 = distance27 + weight;
                direction53 = direction27;
            }
            if (distance46 + weight < distance53) {
                distance53 = distance46 + weight;
                direction53 = direction46;
            }
        }
        if (rc.onTheMap(location57)) {
            weight = 1.0 + rc.senseRubble(location57);
            if (distance33 + weight < distance57) {
                distance57 = distance33 + weight;
                direction57 = direction33;
            }
            if (distance55 + weight < distance57) {
                distance57 = distance55 + weight;
                direction57 = direction55;
            }
            if (distance47 + weight < distance57) {
                distance57 = distance47 + weight;
                direction57 = direction47;
            }
            if (distance31 + weight < distance57) {
                distance57 = distance31 + weight;
                direction57 = direction31;
            }
        }
        if (rc.onTheMap(location58)) {
            weight = 1.0 + rc.senseRubble(location58);
            if (distance34 + weight < distance58) {
                distance58 = distance34 + weight;
                direction58 = direction34;
            }
            if (distance56 + weight < distance58) {
                distance58 = distance56 + weight;
                direction58 = direction56;
            }
            if (distance32 + weight < distance58) {
                distance58 = distance32 + weight;
                direction58 = direction32;
            }
            if (distance48 + weight < distance58) {
                distance58 = distance48 + weight;
                direction58 = direction48;
            }
        }
        if (rc.onTheMap(location62)) {
            weight = 1.0 + rc.senseRubble(location62);
            if (distance60 + weight < distance62) {
                distance62 = distance60 + weight;
                direction62 = direction60;
            }
            if (distance38 + weight < distance62) {
                distance62 = distance38 + weight;
                direction62 = direction38;
            }
            if (distance45 + weight < distance62) {
                distance62 = distance45 + weight;
                direction62 = direction45;
            }
            if (distance36 + weight < distance62) {
                distance62 = distance36 + weight;
                direction62 = direction36;
            }
        }
        if (rc.onTheMap(location63)) {
            weight = 1.0 + rc.senseRubble(location63);
            if (distance61 + weight < distance63) {
                distance63 = distance61 + weight;
                direction63 = direction61;
            }
            if (distance39 + weight < distance63) {
                distance63 = distance39 + weight;
                direction63 = direction39;
            }
            if (distance37 + weight < distance63) {
                distance63 = distance37 + weight;
                direction63 = direction37;
            }
            if (distance47 + weight < distance63) {
                distance63 = distance47 + weight;
                direction63 = direction47;
            }
        }
        if (rc.onTheMap(location67)) {
            weight = 1.0 + rc.senseRubble(location67);
            if (distance65 + weight < distance67) {
                distance67 = distance65 + weight;
                direction67 = direction65;
            }
            if (distance43 + weight < distance67) {
                distance67 = distance43 + weight;
                direction67 = direction43;
            }
            if (distance46 + weight < distance67) {
                distance67 = distance46 + weight;
                direction67 = direction46;
            }
            if (distance41 + weight < distance67) {
                distance67 = distance41 + weight;
                direction67 = direction41;
            }
        }
        if (rc.onTheMap(location68)) {
            weight = 1.0 + rc.senseRubble(location68);
            if (distance66 + weight < distance68) {
                distance68 = distance66 + weight;
                direction68 = direction66;
            }
            if (distance44 + weight < distance68) {
                distance68 = distance44 + weight;
                direction68 = direction44;
            }
            if (distance42 + weight < distance68) {
                distance68 = distance42 + weight;
                direction68 = direction42;
            }
            if (distance48 + weight < distance68) {
                distance68 = distance48 + weight;
                direction68 = direction48;
            }
        }

        switch (target.x - myLocation.x) {
            case -4:
                switch (target.y - myLocation.y) {
                    case -2:
                        return direction52;
                    case -1:
                        return direction50;
                    case 0:
                        return direction49;
                    case 1:
                        return direction51;
                    case 2:
                        return direction53;
                }
                break;
            case -3:
                switch (target.y - myLocation.y) {
                    case -3:
                        return direction45;
                    case -2:
                        return direction28;
                    case -1:
                        return direction26;
                    case 0:
                        return direction25;
                    case 1:
                        return direction27;
                    case 2:
                        return direction29;
                    case 3:
                        return direction46;
                }
                break;
            case -2:
                switch (target.y - myLocation.y) {
                    case -4:
                        return direction62;
                    case -3:
                        return direction38;
                    case -2:
                        return direction21;
                    case -1:
                        return direction10;
                    case 0:
                        return direction9;
                    case 1:
                        return direction11;
                    case 2:
                        return direction22;
                    case 3:
                        return direction43;
                    case 4:
                        return direction67;
                }
                break;
            case -1:
                switch (target.y - myLocation.y) {
                    case -4:
                        return direction60;
                    case -3:
                        return direction36;
                    case -2:
                        return direction16;
                    case -1:
                        return direction5;
                    case 0:
                        return direction1;
                    case 1:
                        return direction6;
                    case 2:
                        return direction19;
                    case 3:
                        return direction41;
                    case 4:
                        return direction65;
                }
                break;
            case 0:
                switch (target.y - myLocation.y) {
                    case -4:
                        return direction59;
                    case -3:
                        return direction35;
                    case -2:
                        return direction15;
                    case -1:
                        return direction3;
                    case 1:
                        return direction4;
                    case 2:
                        return direction18;
                    case 3:
                        return direction40;
                    case 4:
                        return direction64;
                }
                break;
            case 1:
                switch (target.y - myLocation.y) {
                    case -4:
                        return direction61;
                    case -3:
                        return direction37;
                    case -2:
                        return direction17;
                    case -1:
                        return direction7;
                    case 0:
                        return direction2;
                    case 1:
                        return direction8;
                    case 2:
                        return direction20;
                    case 3:
                        return direction42;
                    case 4:
                        return direction66;
                }
                break;
            case 2:
                switch (target.y - myLocation.y) {
                    case -4:
                        return direction63;
                    case -3:
                        return direction39;
                    case -2:
                        return direction23;
                    case -1:
                        return direction13;
                    case 0:
                        return direction12;
                    case 1:
                        return direction14;
                    case 2:
                        return direction24;
                    case 3:
                        return direction44;
                    case 4:
                        return direction68;
                }
                break;
            case 3:
                switch (target.y - myLocation.y) {
                    case -3:
                        return direction47;
                    case -2:
                        return direction33;
                    case -1:
                        return direction31;
                    case 0:
                        return direction30;
                    case 1:
                        return direction32;
                    case 2:
                        return direction34;
                    case 3:
                        return direction48;
                }
                break;
            case 4:
                switch (target.y - myLocation.y) {
                    case -2:
                        return direction57;
                    case -1:
                        return direction55;
                    case 0:
                        return direction54;
                    case 1:
                        return direction56;
                    case 2:
                        return direction58;
                }
                break;
        }

        currentDistance = myLocation.distanceSquaredTo(target);

        score28 = (currentDistance - location28.distanceSquaredTo(target)) / distance28;
        score29 = (currentDistance - location29.distanceSquaredTo(target)) / distance29;
        score33 = (currentDistance - location33.distanceSquaredTo(target)) / distance33;
        score34 = (currentDistance - location34.distanceSquaredTo(target)) / distance34;
        score38 = (currentDistance - location38.distanceSquaredTo(target)) / distance38;
        score39 = (currentDistance - location39.distanceSquaredTo(target)) / distance39;
        score43 = (currentDistance - location43.distanceSquaredTo(target)) / distance43;
        score44 = (currentDistance - location44.distanceSquaredTo(target)) / distance44;
        score49 = (currentDistance - location49.distanceSquaredTo(target)) / distance49;
        score54 = (currentDistance - location54.distanceSquaredTo(target)) / distance54;
        score59 = (currentDistance - location59.distanceSquaredTo(target)) / distance59;
        score64 = (currentDistance - location64.distanceSquaredTo(target)) / distance64;
        score50 = (currentDistance - location50.distanceSquaredTo(target)) / distance50;
        score51 = (currentDistance - location51.distanceSquaredTo(target)) / distance51;
        score55 = (currentDistance - location55.distanceSquaredTo(target)) / distance55;
        score56 = (currentDistance - location56.distanceSquaredTo(target)) / distance56;
        score60 = (currentDistance - location60.distanceSquaredTo(target)) / distance60;
        score61 = (currentDistance - location61.distanceSquaredTo(target)) / distance61;
        score65 = (currentDistance - location65.distanceSquaredTo(target)) / distance65;
        score66 = (currentDistance - location66.distanceSquaredTo(target)) / distance66;
        score45 = (currentDistance - location45.distanceSquaredTo(target)) / distance45;
        score46 = (currentDistance - location46.distanceSquaredTo(target)) / distance46;
        score47 = (currentDistance - location47.distanceSquaredTo(target)) / distance47;
        score48 = (currentDistance - location48.distanceSquaredTo(target)) / distance48;
        score52 = (currentDistance - location52.distanceSquaredTo(target)) / distance52;
        score53 = (currentDistance - location53.distanceSquaredTo(target)) / distance53;
        score57 = (currentDistance - location57.distanceSquaredTo(target)) / distance57;
        score58 = (currentDistance - location58.distanceSquaredTo(target)) / distance58;
        score62 = (currentDistance - location62.distanceSquaredTo(target)) / distance62;
        score63 = (currentDistance - location63.distanceSquaredTo(target)) / distance63;
        score67 = (currentDistance - location67.distanceSquaredTo(target)) / distance67;

        maxScore = Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(Math.max(score28, score29), score33), score34), score38), score39), score43), score44), score49), score54), score59), score64), score50), score51), score55), score56), score60), score61), score65), score66), score45), score46), score47), score48), score52), score53), score57), score58), score62), score63), score67), (currentDistance - location68.distanceSquaredTo(target)) / distance68);

        if (maxScore == score28) {
            return direction28;
        }
        if (maxScore == score29) {
            return direction29;
        }
        if (maxScore == score33) {
            return direction33;
        }
        if (maxScore == score34) {
            return direction34;
        }
        if (maxScore == score38) {
            return direction38;
        }
        if (maxScore == score39) {
            return direction39;
        }
        if (maxScore == score43) {
            return direction43;
        }
        if (maxScore == score44) {
            return direction44;
        }
        if (maxScore == score49) {
            return direction49;
        }
        if (maxScore == score54) {
            return direction54;
        }
        if (maxScore == score59) {
            return direction59;
        }
        if (maxScore == score64) {
            return direction64;
        }
        if (maxScore == score50) {
            return direction50;
        }
        if (maxScore == score51) {
            return direction51;
        }
        if (maxScore == score55) {
            return direction55;
        }
        if (maxScore == score56) {
            return direction56;
        }
        if (maxScore == score60) {
            return direction60;
        }
        if (maxScore == score61) {
            return direction61;
        }
        if (maxScore == score65) {
            return direction65;
        }
        if (maxScore == score66) {
            return direction66;
        }
        if (maxScore == score45) {
            return direction45;
        }
        if (maxScore == score46) {
            return direction46;
        }
        if (maxScore == score47) {
            return direction47;
        }
        if (maxScore == score48) {
            return direction48;
        }
        if (maxScore == score52) {
            return direction52;
        }
        if (maxScore == score53) {
            return direction53;
        }
        if (maxScore == score57) {
            return direction57;
        }
        if (maxScore == score58) {
            return direction58;
        }
        if (maxScore == score62) {
            return direction62;
        }
        if (maxScore == score63) {
            return direction63;
        }
        if (maxScore == score67) {
            return direction67;
        }

        return direction68;
    }
}
